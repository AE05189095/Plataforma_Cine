const mongoose = require("mongoose");
const Movie = require("../models/Movie");
const Showtime = require("../models/Showtime"); // Importaci√≥n necesaria para el populate

// üìç Listar todas las pel√≠culas con funciones
exports.list = async (req, res) => {
    try {
        // Obtenemos las pel√≠culas con sus funciones y el nombre de la sala
        const movies = await Movie.find({})
            .populate({
                path: "showtimes", // Campo 'showtimes' en Movie
                model: "Showtime",
                populate: { path: "hall", select: "name" },
            })
            .sort({ createdAt: -1 }) // √öltimas creadas primero
            .lean();

        res.json(movies);
    } catch (error) {
        console.error("‚ùå Error al listar pel√≠culas:", error);
        res.status(500).json({ message: "Error al obtener pel√≠culas." });
    }
};

// üé¨ Obtener una pel√≠cula espec√≠fica por ID o slug
exports.getById = async (req, res) => {
    try {
        const movieIdOrSlug = req.params.id;

        // Verifica si es un ObjectId v√°lido
        const isObjectId = mongoose.Types.ObjectId.isValid(movieIdOrSlug);

        // Buscar por _id o slug
        const query = isObjectId ? { _id: movieIdOrSlug } : { slug: movieIdOrSlug };

        const movie = await Movie.findOne(query)
            .populate({
                path: "showtimes",
                model: "Showtime",
                populate: { path: "hall", select: "name" },
            })
            .lean();

        if (!movie) {
            return res.status(404).json({ message: "Pel√≠cula no encontrada." });
        }

        res.json(movie);
    } catch (error) {
        console.error("‚ùå Error al obtener pel√≠cula:", error);
        res.status(500).json({ message: "Error interno del servidor." });
    }
};

// ‚ûï Crear una pel√≠cula
exports.create = async (req, res) => {
    try {
        const movie = new Movie(req.body);
        await movie.save();
        res.status(201).json(movie);
    } catch (error) {
        console.error("‚ùå Error al crear pel√≠cula:", error);
        res.status(500).json({ message: "Error al crear pel√≠cula." });
    }
};

// ‚úèÔ∏è Actualizar pel√≠cula
exports.update = async (req, res) => {
    try {
        const movie = await Movie.findByIdAndUpdate(req.params.id, req.body, {
            new: true, // Devuelve el documento actualizado
        });

        if (!movie)
            return res.status(404).json({ message: "Pel√≠cula no encontrada." });

        res.json(movie);
    } catch (error) {
        console.error("‚ùå Error al actualizar pel√≠cula:", error);
        res.status(500).json({ message: "Error al actualizar pel√≠cula." });
    }
};

// ‚ùå Eliminar pel√≠cula
exports.remove = async (req, res) => {
    try {
        // Eliminamos primero las funciones relacionadas
        await Showtime.deleteMany({ movie: req.params.id }); 

        const movie = await Movie.findByIdAndDelete(req.params.id);
        if (!movie)
            return res.status(404).json({ message: "Pel√≠cula no encontrada." });
        
        res.json({ message: "Pel√≠cula eliminada correctamente." });
    } catch (error) {
        console.error("‚ùå Error al eliminar pel√≠cula:", error);
        res.status(500).json({ message: "Error al eliminar pel√≠cula." });
    }
};
